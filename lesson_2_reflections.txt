What happens when you initialize a repository? Why do you need to do it?

    When you initialize a repository your files in that directory begin to be tracked. Git starts to keep data on those files. You need to do this so that you can create commits.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area is a place where you place files (that are in your repository and thus also in your working directory) that you think you are going to commit before you commit them. It acts as an intermediate step to take before commiting.

How can you use the staging area to make sure you have one commit per logical
change?

    If you're not sure that your changes mark a logical change in your project, you can add them to the staging area, keep working and see how those changes feel in the context of your project as a whole. If they do feel like they mark a logical change you can commit them before you stage any new changes.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    If you're in a situation where you want to add an experimental feature that would take a lot of work to implement and that you are not sure about or want to make an alternate version of your project, it would be useful to branch out. Then, when you make commits in these new branches, they will not affect your main branch. You can work on many alternate versions of the same project at the same time without changing the other versions. You can merge the changes when you are ready.

How do the diagrams help you visualize the branch structure?

    Diagrams help visualize the branch structure because you get a very intuitive look and feel of the commits and the paths and the overall structure of the commit history.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    Merging two branches together adds all the changes (additions and deletions) that were made in the two branches since the branches diverged. The branch checked out at the time of the merge is updated to the merge commit. We represent it in the diagram the way we do because it shows intuitively that we are combining the results of the commits of both branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

    Automatic merging is much easier than manual merging. However, when there are situations when there is a merge conflit, or it is not obvious how files should be automatically merged, it is better to manually merge than to leave it up to git to guess how it should merge. Always doing manual merges would be more time consuming than auto merging when there are no conflicts. When there are no conflicts, merging is straightforward as there is no ambiguity as to what changes should be made.